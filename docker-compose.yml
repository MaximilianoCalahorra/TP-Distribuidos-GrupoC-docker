services:
  # ==========================================
  # Base de datos MySQL
  # ==========================================
  mysql:
    image: mysql:8
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql

  # ==========================================
  # Servidor gRPC (Spring Boot)
  # ==========================================
  grpc-server:
    build:
      context: ../TP-Distribuidos-GrupoC-backend/grpc_server
    image: sd-grpc-server-grupo-c:1.0
    container_name: grpc-server
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      DATABASE_HOST: mysql
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      CORS_ALLOWED_ORIGIN: ${CORS_ALLOWED_ORIGIN}
      MAILHOG_URL: ${MAILHOG_URL}
      KAFKA_SERVICE_GRPC_SERVER: ${KAFKA_SERVICE_GRPC_SERVER}
    depends_on:
      - mysql
  
  # ==========================================
  # MailHog
  # ==========================================
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # puerto SMTP
      - "8025:8025"  # interfaz web
  
  # ==========================================
  # Kafka Broker (modo KRaft, sin Zookeeper)
  # ==========================================
  kafka:
    image: apache/kafka:3.7.0
    container_name: kafka-broker
    restart: unless-stopped
    ports:
      - "9092:9092"   # comunicación interna entre contenedores
      - "29092:29092" # acceso desde tu máquina local
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
  
  # ==========================================
  # Servicio Kafka (Spring Boot)
  # ==========================================
  kafka-service:
    build:
      context: ../TP-Distribuidos-GrupoC-backend/kakfa_service
    image: sd-kafka-service-grupo-c:1.0
    container_name: kafka-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_ID}
      KAFKA_AUTO_OFFSET_RESET: ${KAFKA_AUTO_OFFSET_RESET}
      GRPC_SERVER_PRINCIPAL: ${GRPC_SERVER_PRINCIPAL}
    depends_on:
      - kafka

  # ==========================================
  # Kafka UI (Kafbat)
  # ==========================================
  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    restart: unless-stopped
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ONG Empuje Comunitario
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka

  # ==========================================
  # Cliente gRPC (Express)
  # ==========================================
  grpc-client:
    build:
      context: ../TP-Distribuidos-GrupoC-backend/grpc_client
    image: sd-grpc-client-grupo-c:1.0
    container_name: grpc-client
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GRPC_SERVER_URL: ${GRPC_SERVER_URL}
    depends_on:
      - grpc-server
  
  # ==========================================
  # Web Service - GraphQL
  # ==========================================
  graphql-service:
    build:
      context: ../TP-Distribuidos-GrupoC-backend/graphql_service
    image: sd-graphql-service-grupo-c:1.0
    container_name: graphql-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      DATABASE_HOST: mysql
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      CORS_ALLOWED_ORIGIN: ${CORS_ALLOWED_ORIGIN}
    depends_on:
      - mysql

  # ==========================================
  # Web Service - REST
  # ==========================================
  rest-service:
    build:
      context: ../TP-Distribuidos-GrupoC-backend/rest_service
    image: sd-rest-service-grupo-c:1.0
    container_name: rest-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      DATABASE_HOST: mysql
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      CORS_ALLOWED_ORIGIN: ${CORS_ALLOWED_ORIGIN}
    depends_on:
      - mysql
  
  # ==========================================
  # Web Service - Cliente SOAP
  # ==========================================
  soap-service:
    build:
      context: ../TP-Distribuidos-GrupoC-backend/soap_service
    image: sd-soap-service-grupo-c:1.0
    container_name: soap-service
    restart: unless-stopped
    ports:
      - "8084:8084"

  # ==========================================
  # Frontend React
  # ==========================================
  frontend:
    build:
      context: ../TP-Distribuidos-GrupoC-frontend
    image: sd-frontend-grupo-c:1.0
    container_name: frontend
    restart: unless-stopped
    ports:
      - "5173:80"
    depends_on:
      - grpc-client

volumes:
  db_data:
  kafka-data: